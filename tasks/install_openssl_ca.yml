---
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- include: install_common.yml

- name: Installing packages for OpenSSL
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present
  register: install_packages
  until: install_packages|success
  retries: 5
  delay: 2
  with_items: openvas_packages['openvas_ssl']
  tags:
    - openvas-ssl-package-install

- name: Create the OpenSSL CA directories
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - path: "{{ openvas_ca_cert_path }}"
      owner: root
      group: root
      mode: "0755"
    - path: "{{ openvas_ca_cert_path }}/newcerts"
      owner: root
      group: root
      mode: "0755"
    - path: "{{ openvas_ca_cert_path }}/crl"
      owner: root
      group: root
      mode: "0755"
    - path: "{{ openvas_ca_key_path }}"
      owner: root
      group: root
      mode: "0700"
  tags:
    - openvas-ssl-ca-directories

- name: Deploy the OpenSSL Default Configuration File
  template:
    src: "{{ item }}"
    dest: /etc/ssl/openssl.cnf
    owner: root
    group: root
    mode: "0644"
  with_first_found:
    - "{{ ansible_distribution | lower }}.openssl.cnf.j2"
    - "{{ ansible_os_family | lower }}.openssl.cnf.j2"
    - "openssl.cnf.j2"
  tags:
    - openvas-ssl-ca-config

- name: Check for existance of CA index
  stat:
    path: "{{ openvas_ca_cert_path }}/index.txt"
  register: openvas_ca_index_file

- name: Create the CA index file
  file:
    path: "{{ openvas_ca_cert_path }}/index.txt"
    state: touch
  when: openvas_ca_index_file.stat.exists == False

- name: Check for existance of CA serial
  stat:
    path: "{{ openvas_ca_cert_path }}/serial"
  register: openvas_ca_serial_file

- name: Create the CA serial file
  template:
    src: openssl-serial.j2
    dest: "{{ openvas_ca_cert_path }}/serial"
  when: openvas_ca_serial_file.stat.exists == False

- name: Generate CA key
  command: >
    openssl genrsa
    -out {{ openvas_ca_key_path }}/cakey.pem
    {{ openvas_ca_default_bits }}
  args:
    creates: "{{ openvas_ca_key_path }}/cakey.pem"

- name: Generate CA cert
  command: >
    openssl req -new -x509
    -days 1460
    -extensions v3_ca
    -subj "{{ openvas_ca_cert_subject }}"
    -key {{ openvas_ca_key_path }}/cakey.pem
    -out {{ openvas_ca_cert_path }}/cacert.pem
  args:
    creates: "{{ openvas_ca_cert_path }}/cacert.pem"

- name: Generate server key
  command: >
    openssl genrsa
    -out {{ openvas_ca_key_path }}/serverkey.pem
    {{ openvas_ca_default_bits }}
  args:
    creates: "{{ openvas_ca_key_path }}/serverkey.pem"

- name: Check for existance of server cert
  stat:
    path: "{{ openvas_ca_cert_path }}/servercert.pem"
  register: openvas_server_cert

- name: Generate server cert request
  command: >
    openssl req -new
    -subj "{{ openvas_ca_cert_subject }}"
    -key {{ openvas_ca_key_path }}/serverkey.pem
    -out /tmp/serverreq.pem
  args:
    creates: /tmp/servercert.pem
  when: openvas_server_cert.stat.exists == False

- name: Generate server cert response
  command: >
    openssl ca
    -name OpenVAS-CA
    -batch
    -days 365
    -in /tmp/serverreq.pem
    -out {{ openvas_ca_cert_path }}/servercert.pem
  args:
    creates: "{{ openvas_ca_cert_path }}/servercert.pem"
  when: openvas_server_cert.stat.exists == False

- name: Remove server cert request
  file:
    path: /tmp/servercert.pem
    state: absent

